// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `calculate_parallelism`, `generate_output_path`, `load_image`, `save_jpeg`, `save_png`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

String greet({required String name}) =>
    RustLib.instance.api.crateApiSimpleGreet(name: name);

/// 批处理压缩函数
Future<List<ResultCompressionResultString>> compressBatch({
  required List<String> filePaths,
  required int quality,
  int? targetSizeKb,
  required String format,
}) async => RustLib.instance.api.crateApiSimpleCompressBatch(
  filePaths: filePaths,
  quality: quality,
  targetSizeKb: targetSizeKb,
  format: format,
);

Future<CompressionResult> compressSingle({
  required String filePath,
  required int quality,
  required String format,
}) => RustLib.instance.api.crateApiSimpleCompressSingle(
  filePath: filePath,
  quality: quality,
  format: format,
);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Result < CompressionResult , String >>>
abstract class ResultCompressionResultString implements RustOpaqueInterface {}

class CompressionResult {
  final String originalPath;
  final String compressedPath;
  final BigInt originalSize;
  final BigInt compressedSize;

  const CompressionResult({
    required this.originalPath,
    required this.compressedPath,
    required this.originalSize,
    required this.compressedSize,
  });

  @override
  int get hashCode =>
      originalPath.hashCode ^
      compressedPath.hashCode ^
      originalSize.hashCode ^
      compressedSize.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CompressionResult &&
          runtimeType == other.runtimeType &&
          originalPath == other.originalPath &&
          compressedPath == other.compressedPath &&
          originalSize == other.originalSize &&
          compressedSize == other.compressedSize;
}
